// Code generated by hertz generator.

package task

import (
	"Todolist/biz/middleware"
	task "Todolist/biz/model/task"
	"Todolist/biz/pack"
	"Todolist/biz/service"
	"Todolist/pkg/constants"
	"context"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// CreateTask .
// @router /task/create [POST]
func CreateTask(ctx context.Context, c *app.RequestContext) {
	var err error
	var req task.CreateTaskRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}
	resp := new(task.CreateTaskResponse)
	data, err := middleware.JwtMiddleware.GetClaimsFromJWT(ctx, c)
	c.Set(constants.ContextUserId, data[constants.ContextUserId])
	taskResp, err := service.NewTaskService(ctx, c).CreateTask(&req)
	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}
	resp.Resp = pack.BuildBaseReap(nil)
	resp.Data = pack.Task(taskResp)
	pack.SendResponse(c, resp, consts.StatusOK)
}

// QueryTaskByStatus .
// @router /task/query/status [GET]
func QueryTaskByStatus(ctx context.Context, c *app.RequestContext) {
	var err error
	var req task.QueryTaskListByStatusRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}

	resp := new(task.QueryTaskListByStatusResponse)
	data, err := middleware.JwtMiddleware.GetClaimsFromJWT(ctx, c)
	c.Set(constants.ContextUserId, data[constants.ContextUserId])
	list, count, err := service.NewTaskService(ctx, c).QueryTaskListByStatus(&req)
	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}
	resp.Resp = pack.BuildBaseReap(err)
	resp.Data = pack.TaskList(list, count)
	pack.SendResponse(c, resp, consts.StatusOK)
}

// QueryTaskByKeyword .
// @router /task/query/keyword [GET]
func QueryTaskByKeyword(ctx context.Context, c *app.RequestContext) {
	var err error
	var req task.QueryTaskListByKeywordRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}

	resp := new(task.QueryTaskListByKeywordResponse)
	data, err := middleware.JwtMiddleware.GetClaimsFromJWT(ctx, c)
	c.Set(constants.ContextUserId, data[constants.ContextUserId])
	taskResp, count, err := service.NewTaskService(ctx, c).QueryTaskListByKeyword(&req)
	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}
	resp.Resp = pack.BuildBaseReap(err)
	resp.Data = pack.TaskList(taskResp, count)
	pack.SendResponse(c, resp, consts.StatusOK)
}

// UpdateTask .
// @router /task/update [PUT]
func UpdateTask(ctx context.Context, c *app.RequestContext) {
	var err error
	var req task.UpdateTaskRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}

	resp := new(task.UpdateTaskResponse)
	data, err := middleware.JwtMiddleware.GetClaimsFromJWT(ctx, c)
	c.Set(constants.ContextUserId, data[constants.ContextUserId])
	err = service.NewTaskService(ctx, c).UpdateTask(&req)
	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}
	resp.Resp = pack.BuildBaseReap(err)
	pack.SendResponse(c, resp, consts.StatusOK)
}

// DeleteOneTask .
// @router /task/delete [DELETE]
func DeleteOneTask(ctx context.Context, c *app.RequestContext) {
	var err error
	var req task.DeleteTaskRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}
	resp := new(task.DeleteTaskResponse)
	data, err := middleware.JwtMiddleware.GetClaimsFromJWT(ctx, c)
	c.Set(constants.ContextUserId, data[constants.ContextUserId])
	err = service.NewTaskService(ctx, c).DeleteOneTask(&req)
	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}
	resp.Resp = pack.BuildBaseReap(err)
	pack.SendResponse(c, resp, consts.StatusOK)
}

// DeleteTaskByStatus .
// @router /task/delete/status [DELETE]
func DeleteTaskByStatus(ctx context.Context, c *app.RequestContext) {
	var err error
	var req task.DeleteTaskByStatusRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}

	resp := new(task.DeleteTaskByStatusResponse)
	data, err := middleware.JwtMiddleware.GetClaimsFromJWT(ctx, c)
	c.Set(constants.ContextUserId, data[constants.ContextUserId])
	err = service.NewTaskService(ctx, c).DeleteTaskByStatus(&req)
	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}
	resp.Resp = pack.BuildBaseReap(err)
	pack.SendResponse(c, resp, consts.StatusOK)
}
